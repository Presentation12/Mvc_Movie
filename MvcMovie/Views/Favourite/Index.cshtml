@model MvcMovie.Models.MovieGenreViewModel

@{
    Layout = "/Views/Shared/App/_Layout.cshtml";
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<form id="form-filter" asp-controller="Favourite" asp-action="Index" method="get">
    <p>
        <select id="genre-filter" class="form-control">
            <option value="">All</option>
        </select>

        <div class="input-group">
            <input type="text" id="title-filter" asp-for="SearchString" class="form-control" placeholder="Movie..." />
            <input type="submit" id="search-button" value="Filter" onclick="submitSearch(event)" class="btn btn-primary" />
        </div>
    </p>
</form>

<table id="table"
       data-toggle="table"
       data-show-fullscreen="true"
       data-query-params="queryParams"
       data-detail-view="true"
       data-detail-formatter="detailFormatter"
       data-pagination="true"
       data-id-field="id"
       data-page-list="[10, 25, 50, 100, all]"
       data-show-footer="true"
       data-side-pagination="server"
       data-url="https://localhost:7180/Favourite/Paginate"
       data-method="POST"
       data-search="false"
       data-show-columns="true">
    <thead>
        <tr>
            <th data-field="title">Title</th>
            <th data-field="releaseDate" data-formatter="dateFormat">Release Date</th>
            <th data-field="genreName">Genre</th>
            <th data-field="rating">Rating</th>
            <th data-field="" data-formatter="operateFormatter">Actions</th>
        </tr>
    </thead>
</table>

<!-- Delete Modal-->
<div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
     aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Are you sure you want to delete this?</h5>
                <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">Select "Delete" below if you are ready to delete this favourite.</div>
            <form id="delete-form" class="modal-footer" asp-action="Delete">
                <input type="hidden" id="delete-favourite-id" name="id" />
                <input type="submit" value="Delete" class="btn btn-danger" />
                <button class="btn btn-secondary" type="button" data-dismiss="modal">Cancel</button>
            </form>
        </div>
    </div>
</div>

<style>
    .select,
    #locale {
        width: 100%;
    }

    .like {
        margin-right: 10px;
    }
</style>

@section scripts {
    <script>
        var $table = $('#table')
        var $remove = $('#remove')
        var selections = []
        var token = localStorage.getItem('token');

        function getIdSelections() {
            return $.map($table.bootstrapTable('getSelections'), function (row) {
                return row.id
            })
        }

        function responseHandler(res) {
            $.each(res.rows, function (i, row) {
                row.state = $.inArray(row.id, selections) !== -1
            })
            return res
        }

        function detailFormatter(index, row) {
            var html = []
            $.each(row, function (key, value) {
                html.push('<p><b>' + key + ':</b> ' + value + '</p>')
            })
            return html.join('')
        }

        function operateFormatter(value, row, index) {
            return [
                '<div style="display: flex; gap: 10px">',
                `<a class="details" href="/Favourite/Details/${row.id}" title="Details">`,
                '<i class="fa fa-eye"></i>',
                '</a>',
                `<a class="delete" href="#" onclick="deleteMovieFav(${row.id})" data-toggle="modal" data-target="#deleteModal" title="Delete">`,
                '<i class="fa fa-trash"></i>',
                '</a>  ',
                '</div>'
            ].join('')
        }

        var select = $('#genre-filter');
        // genre filter options
        $.ajax({
            url: 'https://localhost:7180/Genre/UsedGenres',
            type: 'GET',
            success: function(response) {
                $.each(response, function(index, item) {
                    select.append('<option>' + item.text + '</option>');
                });
            }
        });

        // refresh the table when is submited the genre filter
        function submitSearch(event) {
            event.preventDefault()
            $('#table').bootstrapTable('refresh')
        }

        // store the favoutire movie id (called on delete confirmation pop-up)
        function deleteMovieFav(id) {
            $('#delete-favourite-id').val(id);
        }

        // trigger delete fav
        $('#delete-form').submit(function (e) {
            e.preventDefault();

            var idMovie = $('#delete-favourite-id').val()

            var data = {
                token: token,
                idMovie: idMovie
            };

            $.ajax({
                url: 'https://localhost:7180/Favourite/Delete',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(data),
                success: function (response) {
                    window.location.href = "/Favourite/Index";
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert('Delete failed: ' + errorThrown);
                }
            });
        });

        window.operateEvents = {
            'click .like': function (e, value, row, index) {
                alert('You click like action, row: ' + JSON.stringify(row))
            },
            'click .remove': function (e, value, row, index) {
                $table.bootstrapTable('remove', {
                    field: 'id',
                    values: [row.id]
                })
            }
        }

        function queryParams(params) {
            const genreFilter = $('#genre-filter').val();
            const titleFilter = $('#title-filter').val();
            var search = [];

            search.push({
                name: "Genre",
                value: genreFilter
            });
            search.push({
                name: "Title",
                value: titleFilter
            });
            ///////////////////////////// TEMPORARIO
            search.push({
                name: "Token",
                value: token
            });
            /////////////////////////////

            params.search = search;

            return JSON.stringify(params);
        }

        function dateFormat(value, row, index) {
            if (value) {
                var date = new Date(value);
                var day = date.getDate();
                var month = date.getMonth() + 1;
                var year = date.getFullYear();

                // Adiciona um zero à esquerda para dias e meses menores que 10
                day = day < 10 ? '0' + day : day;
                month = month < 10 ? '0' + month : month;

                // Formata a data no formato desejado
                return day + '-' + month + '-' + year;
            } else {
                return '-';
            }
        }

        function detailFormatter(index, row) {
            var html = [];
            html.push('<p><b>Id: </b> ' + row.id + '</p>');
            html.push('<p><b>Price: </b> ' + row.price + '</p>');
            return html.join('');
        }

    </script>
}